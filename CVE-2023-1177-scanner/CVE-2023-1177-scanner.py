import argparse
import requests
from packaging import version

def args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--server', help='Specific MLflow protocol, server and port, e.g., http://1.2.3.4:5000',
                        required=False)
    parser.add_argument('-f', '--file', help='Path to file with list of servers separated by newlines', required=False)
    args = parser.parse_args()
    return args

def parse_servers(filename):
    servers = []
    with open(filename, 'r') as f:
        for line in f:
            servers.append(line.strip())
    return servers

def get_servers(args):
    if args.server:
        servers = [args.server]
    elif args.file:
        servers = parse_servers(args.file)
    else:
        print('[-] No servers specified')
        exit(1)
    return servers

def get_version(server):
    url = server + '/version'
    resp = requests.get(url, timeout=30)
    if resp.status_code == 200:
        ver = resp.text
    else:
        ver = '<2.2.1'

    return ver

def confirm_mlflow(server):
    url = server
    try:
        resp = requests.get(url, timeout=15)
        if resp.status_code == 200 and '<title>MLflow</title>' in resp.text:
            return True
        else:
            return False
    except Exception:
        print(f'[-] {server} - Failed to load server')
        return False

def main(args):
    servers = get_servers(args)
    for server in servers:
        if confirm_mlflow(server):
            ver = get_version(server)
            vuln = f'[!] {server} - {ver} - VULNERABLE'
            not_vuln = f'[*] {server} - {ver} - Not vulnerable'

            if '<' not in ver:
                if version.parse(ver) < version.parse('2.2.1'):
                    print(vuln)
                else:
                    print(not_vuln)
            else:
                print(vuln)
        else:
            print(f'[-] {server} is not an MLflow server')


if __name__ == '__main__':
    args = args()
    main(args)
